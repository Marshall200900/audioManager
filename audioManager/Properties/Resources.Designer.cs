//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace audioManager.Properties {
    using System;
    
    
    /// <summary>
    ///   Класс ресурса со строгой типизацией для поиска локализованных строк и т.д.
    /// </summary>
    // Этот класс создан автоматически классом StronglyTypedResourceBuilder
    // с помощью такого средства, как ResGen или Visual Studio.
    // Чтобы добавить или удалить член, измените файл .ResX и снова запустите ResGen
    // с параметром /str или перестройте свой проект VS.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "15.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Возвращает кэшированный экземпляр ResourceManager, использованный этим классом.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("audioManager.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Перезаписывает свойство CurrentUICulture текущего потока для всех
        ///   обращений к ресурсу с помощью этого класса ресурса со строгой типизацией.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на if not exists (select * from albums where album_name=@name and album_date = @date)
        ///	begin
        ///	insert into albums(album_name, album_date) values (@name, @date)
        ///	end.
        /// </summary>
        internal static string addAlbum {
            get {
                return ResourceManager.GetString("addAlbum", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на if not exists (select * from authors where author_name=@name)
        ///	begin
        ///	insert into authors(author_name) values (@name)
        ///	end.
        /// </summary>
        internal static string addAuthor {
            get {
                return ResourceManager.GetString("addAuthor", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на if not exists (select * from countries where country_name=@country)
        ///	begin
        ///	insert into countries(country_name) values (@country)
        ///	end.
        /// </summary>
        internal static string addCountry {
            get {
                return ResourceManager.GetString("addCountry", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на if not exists (select * from formats where format_name=@format)
        ///	begin
        ///	insert into formats(format_name) values (@format)
        ///	end.
        /// </summary>
        internal static string addFormat {
            get {
                return ResourceManager.GetString("addFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на if not exists (select * from genres where genre_name=@genre)
        ///	begin
        ///	insert into genres(genre_name) values (@genre)
        ///	end.
        /// </summary>
        internal static string addGenre {
            get {
                return ResourceManager.GetString("addGenre", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на if not exists (select * from paths where path_name=@path)
        ///	begin
        ///	insert into paths(path_name) values (@path)
        ///	end.
        /// </summary>
        internal static string addPath {
            get {
                return ResourceManager.GetString("addPath", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на if not exists (select * from songs where path_id=(select path_id from paths where path_name=@path+@name+@format_name))
        ///	begin
        ///	insert into songs(song_name, duration, song_date) values (@name, @duration, @date)
        ///	update songs
        ///		set format_id = (select format_id from formats where format_name=@format_name),
        ///			path_id = (select path_id from paths where path_name=@path),
        ///			author_id = (select author_id from authors where author_name=@author_name),
        ///			genre_id = (select genre_id from genres where genre_n [остаток строки не уместился]&quot;;.
        /// </summary>
        internal static string addSong {
            get {
                return ResourceManager.GetString("addSong", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на if not exists (select * from songs_in_albums where song_id=(select song_id from songs where song_name = @song_name))
        ///	begin
        ///		insert into songs_in_albums(song_id)
        ///		(select song_id from songs where song_name = @song_name) 
        ///		update songs_in_albums
        ///			set album_id = (select album_id from albums where album_name=@album_name) where song_id = (select song_id from songs where song_name = @song_name) 
        ///	end.
        /// </summary>
        internal static string addSongsNAlbums {
            get {
                return ResourceManager.GetString("addSongsNAlbums", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на select songs.song_id, song_name, author_name, album_name, album_date, format_name, genre_name, duration, song_date, path_name, country_name, track_name from songs
        ///left join authors
        ///on songs.author_id = authors.author_id
        ///left join songs_in_albums
        ///on songs.song_id = songs_in_albums.song_id
        ///left join albums
        ///on songs_in_albums.album_id = albums.album_id
        ///left join paths
        ///on songs.path_id = paths.path_id
        ///left join formats
        ///on songs.format_id = formats.format_id
        ///left join countries
        ///on countries.country_i [остаток строки не уместился]&quot;;.
        /// </summary>
        internal static string allQuery {
            get {
                return ResourceManager.GetString("allQuery", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на update albums
        ///	set album_date = @album_date
        ///	where album_id = (select album_id from songs_in_albums where song_id = @song_id).
        /// </summary>
        internal static string changeAlbumDate {
            get {
                return ResourceManager.GetString("changeAlbumDate", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на update albums
        ///	set album_date = album_date
        ///	where album_id = @album_id;.
        /// </summary>
        internal static string changeAlbumDateViaId {
            get {
                return ResourceManager.GetString("changeAlbumDateViaId", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на update albums
        ///	set album_name = @album_name
        ///	where album_id = @album_id;.
        /// </summary>
        internal static string changeAlbumName {
            get {
                return ResourceManager.GetString("changeAlbumName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на update authors
        ///	set author_name = @author_name
        ///	where author_id = @author_id.
        /// </summary>
        internal static string changeAuthorName {
            get {
                return ResourceManager.GetString("changeAuthorName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на update songs_in_albums
        ///	set album_id = (select album_id from albums where album_name = @album_name)
        ///	where song_id = @song_id;.
        /// </summary>
        internal static string changeSongAlbum {
            get {
                return ResourceManager.GetString("changeSongAlbum", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на update songs
        ///	set author_id = (select author_id from authors where author_name = @author_name)
        ///	where song_id = @song_id;.
        /// </summary>
        internal static string changeSongAuthor {
            get {
                return ResourceManager.GetString("changeSongAuthor", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на update songs
        ///	set country_id = (select country_id from countries where country_name = @country_name)
        ///	where song_id= @song_id.
        /// </summary>
        internal static string changeSongCountry {
            get {
                return ResourceManager.GetString("changeSongCountry", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на update songs
        ///	set song_date = @song_date
        ///	where song_id = @song_id;.
        /// </summary>
        internal static string changeSongDate {
            get {
                return ResourceManager.GetString("changeSongDate", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на update songs
        ///	set genre_id = (select genre_id from genres where genre_name = @genre_name)
        ///	where song_id = @song_id;.
        /// </summary>
        internal static string changeSongGenre {
            get {
                return ResourceManager.GetString("changeSongGenre", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на update songs
        ///	set song_name = @song_name
        ///	where song_id = @song_id;.
        /// </summary>
        internal static string changeSongName {
            get {
                return ResourceManager.GetString("changeSongName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на select * from songs
        ///where song_name=@song_name and (select format_name from formats where format_id=songs.format_id) = @format_name
        ///and (select path_name from paths where path_id=songs.path_id) = @path_name;.
        /// </summary>
        internal static string checkNameSong {
            get {
                return ResourceManager.GetString("checkNameSong", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на select song_name, format_name, path_name from songs
        ///left join formats
        ///on songs.format_id = formats.format_id
        ///left join paths
        ///on songs.path_id = paths.path_id
        ///where song_name = @song_name and format_name = @format_name and path_name = @path_name;.
        /// </summary>
        internal static string checkSong {
            get {
                return ResourceManager.GetString("checkSong", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Data Source=DESKTOP-TP148UI;Initial Catalog=\&quot;Music Library\&quot;;Integrated Security=True.
        /// </summary>
        internal static string connectionString {
            get {
                return ResourceManager.GetString("connectionString", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на delete from albums where album_id = @album_id;.
        /// </summary>
        internal static string deleteAlbum {
            get {
                return ResourceManager.GetString("deleteAlbum", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на delete from authors where author_id = @author_id;.
        /// </summary>
        internal static string deleteAuthor {
            get {
                return ResourceManager.GetString("deleteAuthor", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на delete from formats
        ///	where format_id = @format_id.
        /// </summary>
        internal static string deleteFormat {
            get {
                return ResourceManager.GetString("deleteFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на delete from paths
        ///	where path_id=@path_id.
        /// </summary>
        internal static string deletePath {
            get {
                return ResourceManager.GetString("deletePath", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на delete from songs
        ///	where song_id = @song_id.
        /// </summary>
        internal static string deleteSong {
            get {
                return ResourceManager.GetString("deleteSong", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на select format_name from songs
        ///left join formats
        ///on songs.format_id = formats.format_id
        ///where song_id=@song_id;.
        /// </summary>
        internal static string getFormatById {
            get {
                return ResourceManager.GetString("getFormatById", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на select path_name from songs
        ///left join paths
        ///on songs.path_id = paths.path_id
        ///where song_id=@song_id;.
        /// </summary>
        internal static string getPathById {
            get {
                return ResourceManager.GetString("getPathById", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на select songs.song_id, song_name, author_name, album_name, duration from songs
        ///                                        left join songs_in_albums
        ///                                        on songs.song_id = songs_in_albums.song_id
        ///                                        left join albums
        ///                                        on albums.album_id = songs_in_albums.album_id
        ///                                        left join authors
        ///                                        on songs.author_id = authors.author_id [остаток строки не уместился]&quot;;.
        /// </summary>
        internal static string mediumQuery {
            get {
                return ResourceManager.GetString("mediumQuery", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на select songs.song_id, song_name, album_name from songs
        ///                                        left join songs_in_albums
        ///                                        on songs.song_id = songs_in_albums.song_id left join albums on songs_in_albums.album_id = albums.album_id;.
        /// </summary>
        internal static string shortQuery {
            get {
                return ResourceManager.GetString("shortQuery", resourceCulture);
            }
        }
    }
}
